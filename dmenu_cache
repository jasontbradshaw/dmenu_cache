#!/usr/bin/env python

from __future__ import print_function
from __future__ import unicode_literals

import collections
import json
import operator
import os
import sys

PROG_NAME = 'dmenu_cache'
CACHE_NAME = "cache.json"
DATA_BASE = os.getenv('XDG_DATA_HOME') or os.path.expanduser('~/.local/share')
CACHE_PATH = os.path.join(DATA_BASE, PROG_NAME, CACHE_NAME)

# How much using a term increases its frequency count.
USE_FACTOR = 5

# How much to reduce every count after each use.
AGE_FACTOR = 1

def ensure_cache_loaded(fn):
  '''Decorator that ensures the cache is currently loaded in memory.'''

  def wrapper(self=None, *args, **kwargs):
    # Make sure the cache is loaded before running the method.
    if self._Cache__cache is None:
      raise IOError("The cache is not accessible outside a 'with' context!")

    # Call the method once we're sure the cache exists.
    return fn(self, *args, **kwargs)

  return wrapper

class Cache(object):
  '''A disk-backed frequency cache.'''

  # Used when sorting the term list.
  GETTER_FIRST = operator.itemgetter(0)
  GETTER_SECOND = operator.itemgetter(1)

  def __init__(self, path, use_factor=5, age_factor=1):
    self.path = path
    self.use_factor = use_factor
    self.age_factor = age_factor

  @ensure_cache_loaded
  def use(self, term, use_factor_override=None):
    '''Mark a term as used, increasing its frequency count.'''
    # Default to the given value, otherwise use the internal value.
    use_factor = use_factor_override
    if use_factor_override is None:
      use_factor = self.use_factor

    self.__cache[term] += use_factor

  @ensure_cache_loaded
  def remove(self, term):
    '''
    Remove a term from the cache entirely. Throws a `KeyError` if the term
    doesn't exist in the cache.
    '''

    del self.__cache[term]

  @ensure_cache_loaded
  def age(self):
    '''Age all entries in the cache.'''

    terms_to_remove = []
    for term in self:
      self.__cache[term] -= self.age_factor

      # Mark the term if it has aged-out.
      if self.__cache[term] <= 0:
        terms_to_remove.append(term)

    # Remove all aged-out terms.
    for term in terms_to_remove:
      del self.__cache[term]

  @ensure_cache_loaded
  def clear(self):
    '''Empty the cache of all terms.'''
    self.__cache = collections.Counter()

  @ensure_cache_loaded
  def items(self):
    return self.__cache.items()

  @ensure_cache_loaded
  def __iter__(self):
    # Pairs of (term, count).
    terms = [item for item in self.__cache.items()]

    # Sort terms first alphabetically, then by reverse count. This preserves
    # alphabetical order, except when counts are larger.
    terms.sort(key=Cache.GETTER_FIRST)
    terms.sort(key=Cache.GETTER_SECOND, reverse=True)

    # Yield the terms in sorted order.
    for term, count in terms:
      yield term

  @ensure_cache_loaded
  def __str__(self):
    return json.dumps(self.__cache, indent=2)

  def __load_cache(self, path):
    '''Load the cache from disk into memory.'''

    # Set the default cache value.
    self.__cache = collections.Counter()

    try:
      with open(path, 'r') as f:
        self.__cache = collections.Counter(json.load(f))
    except IOError:
      # Make sure we have a cache directory.
      try:
        os.makedirs(os.path.dirname(path))
      except OSError:
        # If we get an error, the cache directory already existed, so we don't
        # need to do anything else. The file will be created if anyone uses the
        # cache.
        pass

  def __enter__(self):
    self.__load_cache(self.path)
    return self

  def __exit__(self, exception_type, exception_value, traceback):
    # Reset our internal cache variable.
    cache = self.__cache
    self.__cache = None

    # Write our cache file to disk now that we're done modifying it.
    with open(CACHE_PATH, 'w') as f:
      json.dump(cache, f, indent=2)

def show(cache):
  '''Show, then age, all values in the cache. Seeds the cache from the PATH.'''

  # Seed the cache with executables from the `PATH`.
  paths = os.getenv('PATH').strip().split(':')

  # Collect all the individual terms.
  path_terms = set()
  for path in paths:
    # If we fail to list the directory, skip it.
    try:
      for term in os.listdir(path):
        path_terms.add(term)
    except OSError:
      pass

  # Add all the terms to the cache uniquely and with 0 uses. This makes them
  # show up in the output, but they'll be aged-out before the cache hits disk
  # since they have no usages. They'll also have less precendence than the terms
  # that have actual uses, but will still be available for use.
  for term in path_terms:
    cache.use(term, use_factor_override=0)

  # Remove any terms from the cache that _weren't_ in the path. This way, we
  # won't show old programs that have since been uninstalled.
  uninstalled_terms = []
  for term in cache:
    if term not in path_terms:
      cache.remove(term)

  # Emit all the terms in most-used order, each on its own line.
  for term in cache:
    print(term)

  # Age the cache once we're done with it to remove all the seeded terms.
  cache.age()

def update(cache):
  '''Update the cache using all terms from stdin.'''

  for line in sys.stdin:
    term = line.strip()

    if len(term) > 0:
      cache.use(term)

    # Output the line exactly as we received it (with newline re-added).
    print(line)

def reset(cache):
  '''Remove all terms from the cache.'''
  cache.clear()

def stringify(cache):
  '''Print all the raw values in the cache.'''
  pairs = [p for p in cache.items()]
  pairs.sort(key=Cache.GETTER_FIRST)
  pairs.sort(key=Cache.GETTER_SECOND, reverse=True)

  for term, count in pairs:
    print("{}: {}".format(term, count))

def main(command):
  with Cache(CACHE_PATH, use_factor=USE_FACTOR, age_factor=AGE_FACTOR) as cache:
    if command == 'update':
      update(cache)
    elif command == 'show':
      show(cache)
    elif command == 'reset':
      reset(cache)
    elif command == 'print':
      stringify(cache)
    else:
      print('Unrecognized command:', command)
      sys.exit(1)

if __name__ == '__main__':
  # Make sure we were given a command.
  if len(sys.argv) < 2:
    print('A command is required.')
    sys.exit(1)

  # Pass the normalized command to the main method.
  command = sys.argv[1].strip().lower()
  main(command)
